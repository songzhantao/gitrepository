<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.0.xsd
		">
	<context:component-scan base-package="org.lanqiao.service"></context:component-scan>


	<!-- 加载属性配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:dbconfig.properties" />
	</bean>


	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="maxActive" value="${maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<!-- 连接测试SQL语句 -->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="filters" value="${filters}" />

	</bean>
	
	
	<!-- 数据源配置 -->
	<bean id="dataSource-slave" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${slave-url}" />
		<property name="username" value="${slave-username}" />
		<property name="password" value="${slave-password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="maxActive" value="${maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<!-- 连接测试SQL语句 -->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="filters" value="${filters}" />

	</bean>
	
	
	
	<bean class="org.lanqiao.aspectj.DynamicDataSource" id="dynamicDataSource">  
    <property name="targetDataSources">  
        <map key-type="java.lang.String">  
            <entry value-ref="dataSource" key="dataSource"></entry>
            <entry value-ref="dataSource-slave" key="dataSource-slave"></entry>  
        </map>  
    </property>  
    <property name="defaultTargetDataSource" ref="dataSource">  
    </property>  
</bean>  
	
	
	
	
	<!-- Spring整合Mybatis持久层框架 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="mapperLocations" value="/WEB-INF/conf/sql/mapper/*.xml" />
		<property name="typeAliasesPackage" value="com.lanqiao.model" />
	</bean>


	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.lanqiao.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository"></property>
	</bean>
	<!-- 切面 -->
	<bean id="Sl4jLogerAspectj" class="org.lanqiao.aspectj.Sl4jLogerAspectj"></bean>


	<!-- 基于配置文件的AOP 日志管理 -->
	<aop:config>
		<!-- 切点 -->
		<aop:pointcut id="pointCut"
			expression="execution(* org.lanqiao.service.impl..*.*(..))" />
		<aop:aspect ref="Sl4jLogerAspectj">
			<aop:before pointcut-ref="pointCut" method="sl4Jbefore" />
			<aop:after pointcut-ref="pointCut" method="sl4Jafter" />
		</aop:aspect>
	</aop:config>


	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	<!-- 事务通知 -->		<!-- 传播特性 固定配置 isolation 隔离级别 固定配置 -->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" 
				read-only="false" rollback-for="java.lang.Exception"/> <tx:method name="insert*" 
				propagation="REQUIRED" isolation="DEFAULT" read-only="false" rollback-for="java.lang.Exception"/> 
				<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" 
				rollback-for="java.lang.Exception"/> <tx:method name="*" propagation="REQUIRED" 
				read-only="true"/> -->
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="search*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="false" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	<!-- 动态数据源切面 -->
	<bean id="dataSourceAspectj" class="org.lanqiao.aspectj.DataSourceAspectj">
		<!-- 配置数据源的ID  -->
		<property name="masterDataSourceKey" value="dataSource"></property>
		<property name="slaveDataSourceKey" value="dataSource-slave"></property>
	</bean>
	
	
	<aop:config>
		<aop:pointcut id="lanqiaoService"
			expression="execution (* org.lanqiao.service.impl.*.*(..))" />
		<aop:advisor advice-ref="advice" pointcut-ref="lanqiaoService"  order="2"/>
		<aop:aspect ref="dataSourceAspectj" order="1">
			<aop:before pointcut-ref="lanqiaoService" method="changeDataSourceBefore" />
		</aop:aspect>
		
	</aop:config>


	<!-- 工作流开始 -->

	<!-- 流程配置 -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">

		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseSchemaUpdate" value="true" />
		<property name="jobExecutorActivate" value="false" />
		<property name="activityFontName" value="宋体" />
		<property name="labelFontName" value="宋体" />

	</bean>

	<!-- 流程引擎工厂 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>



	<!-- 引擎服务 -->
	<bean id="repositoryService" factory-bean="processEngine"
		factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine"
		factory-method="getRuntimeService" />
	<bean id="formService" factory-bean="processEngine"
		factory-method="getFormService" />
	<bean id="identityService" factory-bean="processEngine"
		factory-method="getIdentityService" />
	<bean id="taskService" factory-bean="processEngine"
		factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine"
		factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngine"
		factory-method="getManagementService" />

	<!-- 工作流 结束 -->

	<!-- 流程XML部署服务 -->



</beans>